<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar</title>
       <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }

        .calendar-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: 90%;
            max-width: 400px;
            margin-bottom: 20px;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .calendar-header button {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
            padding: 5px;
        }
        .calendar-header h2 {
            margin: 0 10px;
            font-size: 1.5em;
        }


        .weekdays {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            text-align: center;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .weekdays div {
          padding: 5px 0;
        }

        .days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-gap: 5px;
        }

        .day {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #e0e0e0;
            border-radius: 5px;
            height: 40px;
            cursor: pointer;
            transition: background-color 0.3s ease;
             position: relative;
        }

        .day:hover {
            background-color: #d0d0d0;
        }
        .day.selected {
            background-color: #e6e6e6de;
            color: white;
        }
          .day.red{
               background-color: red;
               color: white;
          }
           .day.other-month {
            color: #888;
        }
        .day button {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: transparent;
            border: none;
            cursor: pointer;
             font-size: 12px;
        }
        .color-explanation {
           display: flex;
           align-items: center;
           gap: 10px;
             background-color: white;
           border-radius: 8px;
           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
           padding: 20px;
            width: 90%;
            max-width: 400px;
             text-align: center;
            margin-top: 20px;
           margin-bottom: 20px;
        }
         .color-explanation .color-circle {
           width: 20px;
           height: 20px;
           border-radius: 50%;
        }
         .day.blue {
               background-color: blue;
               color: white;
          }
        .change-color-button{
            background-color: #4caf50;
             color: white;
             padding: 10px 15px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 10px;
        }
         @media (max-width: 600px) {
            .calendar-container,
            .color-explanation{
                 width: 95%;
                padding: 10px;
           }
            .day {
              height: 30px;
             }
        }
    </style>
</head>
<body>
    <div class="calendar-container" id="calendar1">
        <div class="calendar-header">
            <button class="prev-month" data-calendar="1">&lt;</button>
            <h2 class="current-month-year" data-calendar="1"></h2>
            <button class="next-month" data-calendar="1">&gt;</button>
        </div>
        <div class="calendar-body">
            <div class="weekdays">
                <div>–ü–Ω</div>
                <div>–í—Ç</div>
                <div>–°—Ä</div>
                <div>–ß—Ç</div>
                <div>–ü—Ç</div>
                <div>–°–±</div>
                <div>–í—Å</div>
            </div>
            <div class="days" data-calendar="1"></div>
        </div>
    </div>
     <div class="calendar-container" id="calendar2">
        <div class="calendar-header">
            <button class="prev-month" data-calendar="2">&lt;</button>
            <h2 class="current-month-year" data-calendar="2"></h2>
             <button class="next-month" data-calendar="2">&gt;</button>
        </div>
        <div class="calendar-body">
            <div class="weekdays">
                <div>–ü–Ω</div>
                <div>–í—Ç</div>
                <div>–°—Ä</div>
                <div>–ß—Ç</div>
                <div>–ü—Ç</div>
                <div>–°–±</div>
                <div>–í—Å</div>
            </div>
            <div class="days" data-calendar="2"></div>
        </div>
    </div>
    <div class="color-explanation">
          <div class="color-circle" style="background-color: red;"></div>
        <span>- Red color description</span>
           <div class="color-circle" style="background-color: blue;"></div>
            <span>- Blue color description</span>
    </div>
      <button class="change-color-button" id="change-all-blue">–ü–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –Ω–∞ —Å–∏–Ω–∏–π</button>
    <script>
      const prevMonthButtons = document.querySelectorAll('.prev-month');
       const nextMonthButtons = document.querySelectorAll('.next-month');
        const currentMonthYears = document.querySelectorAll('.current-month-year');
       const daysContainers = document.querySelectorAll('.days');
        const changeAllBlueButton = document.getElementById('change-all-blue');
       let calendars = {};
    function initializeCalendar(calendarId) {
        let currentDate = new Date();
          const coloredDates = JSON.parse(localStorage.getItem('coloredDates'+calendarId)) || {};
       function generateCalendar() {
             const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const firstDayOfWeek = firstDay.getDay() === 0 ? 7 : firstDay.getDay(); // 1 (Monday) to 7 (Sunday)
            const totalDays = lastDay.getDate();
          const prevMonthLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0).getDate();

        const currentMonthYearElement =  document.querySelector(`.current-month-year[data-calendar="${calendarId}"]`);
        const daysContainerElement = document.querySelector(`.days[data-calendar="${calendarId}"]`);

            currentMonthYearElement.textContent = `${currentDate.toLocaleString('default', { month: 'long' })} ${currentDate.getFullYear()}`;
            daysContainerElement.innerHTML = '';
            let dayCounter = 1;
              let prevMonthDayCounter = prevMonthLastDay - firstDayOfWeek + 2;

            for (let i = 1; i <= 42; i++) {
              const dayDiv = document.createElement('div');
                dayDiv.classList.add('day');
                 if(i < firstDayOfWeek){
                       dayDiv.classList.add('other-month');
                       dayDiv.textContent = prevMonthDayCounter++;
                    }
                  else if (dayCounter <= totalDays) {
                  dayDiv.textContent = dayCounter;
                    const dayKey = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${dayCounter}`;
                    if (coloredDates[dayKey] === 'red') {
                            dayDiv.classList.add('red');
                        } else if (coloredDates[dayKey] === 'blue') {
                             dayDiv.classList.add('blue');
                        }

                       const button = document.createElement('button');
                        button.textContent = 'üî¥';
                        button.style.display = 'none';
                        dayDiv.appendChild(button);
                        button.addEventListener('click', (e) => {
                             e.stopPropagation();
                           if(dayDiv.classList.contains('red')){
                                dayDiv.classList.remove('red');
                                coloredDates[dayKey] = '';
                           } else if (dayDiv.classList.contains('blue')){
                                   dayDiv.classList.remove('blue');
                                coloredDates[dayKey] = '';
                           } else {
                                dayDiv.classList.add('red');
                                coloredDates[dayKey] = 'red';
                            }
                               localStorage.setItem('coloredDates'+calendarId, JSON.stringify(coloredDates));
                        });
                     dayDiv.addEventListener('click', () => {
                           document.querySelectorAll('.day').forEach(day => {
                                day.classList.remove('selected');
                              const but = day.querySelector('button');
                                 if(but) {
                                     but.style.display = 'none';
                                  }
                         })
                           dayDiv.classList.add('selected');
                         button.style.display = 'block';
                     });
                dayCounter++;
                } else {
                     dayDiv.classList.add('other-month');
                        dayDiv.textContent =  dayCounter - totalDays;
                     dayCounter++;
                   }
              daysContainerElement.appendChild(dayDiv);
            }
        }

        function prevMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            generateCalendar();
        }

        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            generateCalendar();
        }
        generateCalendar();

      return {
          prevMonth: prevMonth,
         nextMonth: nextMonth,
          currentDate: currentDate,
          coloredDates: coloredDates
       };
    }

    prevMonthButtons.forEach(button => {
         button.addEventListener('click', function() {
            const calendarId = this.dataset.calendar;
             calendars[calendarId].prevMonth()
          });
      });
    nextMonthButtons.forEach(button => {
          button.addEventListener('click', function() {
               const calendarId = this.dataset.calendar;
             calendars[calendarId].nextMonth();
           });
       });
        for (let i = 1; i <= 2; i++) {
            calendars[i] = initializeCalendar(i);
       }
    changeAllBlueButton.addEventListener('click', () => {
          for (let key in calendars){
            for (let dayKey in calendars[key].coloredDates) {
                  calendars[key].coloredDates[dayKey] = 'blue';
           }
           localStorage.setItem('coloredDates'+ key, JSON.stringify(calendars[key].coloredDates));
           calendars[key].generateCalendar();
        }
       });
    </script>
</body>
</html>
